showBar () {
 # written by Niels van Strien
 # 2012-JAN-11
 percDone=$(echo 'scale=2;'$1/$2*100 | bc)
 barLen=$(echo ${percDone%'.00'})
 barLen2=$(echo ${percDone%'.00'}/2 | bc)
 bar=''
 fills=''
 for (( b=0; b<$barLen2; b++ ))
 do
  bar=$bar"*"
 done
 blankSpaces=$(echo $((50-$barLen2)))
 for (( f=0; f<$blankSpaces; f++ ))
 do
  fills=$fills"_"
 done
 clear

if [ ${1} -eq 0  ] # loop from which function is called has to start at 0
then
 echo "-------------------------------------------------------------------------------"
 echo ${Procedure}
 echo "-------------------------------------------------------------------------------"
 echo "Overall progress: "
 echo '['$bar'>'$fills'] - '$barLen'%' 
 echo "-------------------------------------------------------------------------------" 
 echo 'Time remaining: estimating on basis of 1st iteration; please wait' 
 echo "-------------------------------------------------------------------------------" 

sum_time_elapsed=0

else
# calculating ETA
 time_end=`date +%s`
 time_elapsed=$(( time_end - $3 ))
 sum_time_elapsed=$(( sum_time_elapsed + time_elapsed ))
 mean_time_elapsed=$(( sum_time_elapsed / $1 ))
 remaining_time=$(( mean_time_elapsed * $2 - mean_time_elapsed * $1 ))
 eta=$(( time_end + remaining_time ))
 eta2=`date -d @$eta`

# debug only
# echo $3
# echo $time_end
# echo $time_elapsed
 #echo $sum_time_elapsed
 #echo $mean_time_elapsed
# echo $remaining_time

 echo "-------------------------------------------------------------------------------"
 echo ${Procedure}
 echo "-------------------------------------------------------------------------------"
 echo "Overall progress: "
 echo '['$bar'>'$fills'] - '$barLen'%' 
 echo "-------------------------------------------------------------------------------" 
 echo 'Time remaining: ' $(( remaining_time / 3600 ))h $(( remaining_time %3600 / 60 ))m $(( remaining_time % 60 ))s "; ETA: " ${eta2}
 echo "-------------------------------------------------------------------------------" 
fi

}


mc_ants_rigid () {

inname=${infname}
outname=${OUT}
avg=${outname}_avg.nii.gz
ants_moco -d 3 -a ${inname} -o ${avg} >> ${outname}_mcr_progress.txt
exe="ants_moco -d 3 -o [ ${outname} , ${outname}moco.nii.gz , ${avg} ]                        
		-m MI[ ${avg} , ${inname} , 1, 20, 50 ]                          
		-t Rigid[0.01]  
		-i 25  -u 1  -e 1  -s 0  -f 1  -n 25 "
echo
echo "Running rigid motion correction on `basename ${inname}`, please wait."
echo "Progress can be seen in `basename ${outname}_mcr_progress.txt`"
echo
$exe >> ${outname}_mcr_progress.txt

}

mc_ants_nonrigid () {

inname=${infname}
outname=${OUT}
avg=${OUT}_avgnr.nii.gz
ants_moco -d 3 -a ${inname} -o ${avg} >> ${outname}_mcnr_progress.txt
exe="ants_moco -d 3 -o [ ${inname} , ${inname}moconr.nii.gz , ${avg}]                         
		-m MI[ ${avg} , ${inname} , 1, 20, 50 ]                          
		-t Rigid[0.01]  
		-i 25  -u 1  -e 1  -s 0  -f 1  -n 25 
		-m CC[ ${avg} ,  ${inname} , 1, 2 ]                          
		-t GaussianDisplacementField[0.15 , 3, 0.5 ]   
		-i 10  -u 1  -e 1  -s 0  -f 1 -n 10 "
echo
echo "Running non-rigid motion correction on `basename ${inname}`, please wait."
echo "Progress can be seen in `basename ${outname}_mcnr_progress.txt`"
echo
$exe >> ${outname}_mcnr_progress.txt

}

ants_bxt () {

inname=${infname}
outname=${OUT}
BM=${OUT}_brainmask.nii.gz
ThresholdImage 3 $img $BM Otsu 3
ThresholdImage 3 $BM $BM 2 3 
ImageMath 3 $BM ME $BM 1 
ImageMath 3 $BM GetLargestComponent $BM 
ImageMath 3 $BM MD $BM  1
#  ImageMath 3 $BM ME $BM  1

}


